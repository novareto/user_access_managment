openapi: 3.0.3
info:
  title: Virtual User Storage API
  description: Virtual User Storage API for usage from within a Keycloak User Storage SPI to connect to an external user storage.
  version: 1.0.0
  contact:
    name: Novareto GmbH
    email: info@novareto.de
    url: http://novareto.de
externalDocs:
  description: Keycloak User Storage SPI Documentation
  url: https://www.keycloak.org/docs/latest/server_development/index.html#_user-storage-spi

servers:
  - url: 'http://localhost:8080'

security:
  - basicAuth: []

tags:
  - name: users
    description: Operations about users
  - name: credentials
    description: Operations on credentials

paths:
  /users:
    get:
      summary: List of users
      description: Returns a list of users. If no users could be found, an empty list must be returned.
      operationId: listUsers
      tags:
        - users
      parameters:
        - name: first
          in: query
          description: number of first result to return
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: max
          in: query
          description: number of max results to return
          schema:
            type: integer
            minimum: 1
            default: 20
        - name: email
          in: query
          description: case insensitive email address of user to return, must match completely, if used, max. 1 user may be returned (if email address is unique)
          schema:
            type: string
        - name: search
          in: query
          description: case insensitive list of strings separated by whitespaces, contained (possibly partly) in username, email, first name or last name
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualUsers'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/count:
    get:
      summary: Number of users
      description: Returns the total number of users.
      operationId: usersCount
      tags:
        - users
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                properties:
                  count:
                    type: integer
                    minimum: 0
                example:
                  count: 123
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}:
    get:
      summary: Find a single user by ID
      description: Returns a single user with the supplied ID.
      operationId: getUserById
      tags:
        - users
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualUser'
        400:
          description: Invalid ID supplied
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /credentials/{userId}:
    get:
      summary: Retrieve current credential model for given userId
      description: Retrieve current credential model with hash and other attributes to be able to verify the user-provided credential.
      operationId: getCredentialModel
      tags:
        - credentials
      parameters:
        - name: userId
          in: path
          description: ID of the user the credentials should be returned for
          required: true
          schema:
            type: string
      responses:
        200:
          description: Credential model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialModel'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Credential model not found
    put:
      summary: Updates users credential model
      description: Updates/sets the users credential model with hash and other credential attributes.
      operationId: updateCredentialModel
      tags:
        - credentials
      parameters:
        - name: userId
          in: path
          description: ID of the user the credentials should be returned for
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialModel'
      responses:
        204:
          description: Credential model update successful
        400:
          description: Credential model update failed
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User entity to update the credential model for not found

components:
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    VirtualUser:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: string
          description: unique identifier for this user
          example: 55746c21-af2e-491d-9af4-6d7d46ede50b
        email:
          type: string
          example: 'john.doe@example.com'
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        attributes:
          $ref: '#/components/schemas/Attributes'
        groups:
          type: array
          items:
            type: string
            example: Editors
    VirtualUsers:
      type: array
      items:
        $ref: '#/components/schemas/VirtualUser'
    CredentialModel:
      type: object
      required:
        - value
        - salt
      properties:
        value:
          type: string
          description: credential value, e.g. hashed password (base64 encoded), the example value here is "test"
          example: /bVkHA4G/VOskjaCgNYyTz1BhgD+9X8bxCNEPGGpnDCJbWHDXIW0G8IlSBhDdJsXTjrXt/7yQguBwJ3sxSmSKA==
        salt:
          type: string
          description: (generated) salt for creating the credential hash (base64 encoded), the example value here matches the provided example hash value
          example: lZtleWv1DeEcNIr8MTzdeg==
        iterations:
          type: integer
          description: count of iterations used to create the hash
          example: 27500
        algorithm:
          type: string
          description: used hashing algorithm
          example: pbkdf2-sha256
        type:
          type: string
          description: the type of this credential
          default: password
          example: password
        attributes:
          $ref: '#/components/schemas/Attributes'
    Attributes:
      type: object
      description: generic multivalued map, keys are strings, values are string-arrays
      example:
        foo:
          - bar
          - baz
        fizz:
          - buzz
